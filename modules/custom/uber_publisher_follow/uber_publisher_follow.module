<?php
/**
 * @file
 * Functions for the uber publisher follow module.
 */

/**
 * Implements hook_theme().
 */
function uber_publisher_follow_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'uber_publisher_follow') . '/theme';
  return array(
    'uber_publisher_follow_platforms_table' => array(
      'render element' => 'form',
      'file' => '/theme.inc',
      'path' => $path,
    ),
    'uber_publisher_follow_platforms' => array(
      'variables' => array(
        'platform_values' => array(),
        'icon_style' => '',
        'icon_size' => '',
        'appearance' => array(),
        'link_attributes' => array(),
        'attributes' => array(),
      ),
      'file' => '/theme.inc',
      'path' => $path,
    ),
    'uber_publisher_follow_platform' => array(
      'variables' => array(
        'info' => array(),
        'name' => NULL,
        'value' => NULL,
        'icon_style' => '',
        'icon_size' => '',
        'appearance' => array(),
        'attributes' => array(),
      ),
      'file' => '/theme.inc',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function uber_publisher_follow_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function uber_publisher_follow_block_info() {
  $blocks['uber-publisher-follow'] = array(
    'info' => t('Uber publisher follow'),
    // We cache per role, so that the edit/configure links display only if the
    // user has access.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function uber_publisher_follow_block_configure($delta = '') {
  if ($delta === 'uber-publisher-follow') {
    $values = array(
      'appearance' => variable_get('uber_publisher_follow_appearance', array()),
      'icon_style' => variable_get('uber_publisher_follow_icon_style', ''),
    );

    $form = uber_publisher_follow_form($values);

    return $form;
  }
}

function uber_publisher_follow_form($values) {
  $form = array();
  $platforms = uber_publisher_follow_platforms();

  // Appearance.
  $form['appearance'] = array(
    '#type' => 'fieldset',
    '#title' => t('Appearance'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $appearance_values = isset($values['appearance']) ? $values['appearance'] : array();
  $form['appearance']['orientation'] = array(
    '#type' => 'select',
    '#title' => t('Orientation'),
    '#default_value' => isset($appearance_values['orientation']) ? $appearance_values['orientation'] : 'h',
    '#options' => array(
      'v' => t('vertical'),
      'h' => t('horizontal'),
    ),
  );
  $form['appearance']['show_name'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show name'),
    '#description' => t('Show the platform name next to the icon.'),
    '#default_value' => isset($appearance_values['show_name']) ? $appearance_values['show_name'] : 0,
  );

  // Icon Sets.
  $form['icons'] = array(
    '#type' => 'fieldset',
    '#title' => t('Icon Sets'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $options = uber_publisher_follow_iconsets_options();
  $icon_values = isset($values['icon_style']) ? $values['icon_style'] : array();
  $form['icons']['icon_style'] = array(
    '#type' => 'select',
    '#title' => t('Icon Style'),
    '#default_value' => $icon_values,
    '#options' => $options,
  );

  // Generate the icon set table.
  $header = array(
    array(
      'data' => t('Name'),
      'style' => 'width: 150px;',
    ),
    t('Sizes'),
    t('Icon examples and download instructions'),
  );

  $rows = array();
  $icons = uber_publisher_follow_iconsets();
  foreach ($icons as $iconset_name => $iconset) {
    if (!isset($iconset['type'])) {
      $iconset['type'] = 'images';
    }
    $name = '<strong>' . $iconset['name'] . '</strong>';

    $row = array(
      $name,
      implode('<br />', $iconset['styles']),
    );

    $row[] = '<div class="screenshot">screenshot</div>';

    $rows[] = $row;
    $vars = array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(
        'id' => 'uber-publisher-follow-iconsets',
      ),
    );

    $form['icons']['installed'] = array(
      '#markup' => theme('table', $vars),
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function uber_publisher_follow_block_save($delta = '', $edit = array()) {
  if ($delta === 'uber-publisher-follow') {
    variable_set('uber_publisher_follow_appearance', $edit['appearance']);
    variable_set('uber_publisher_follow_icon_style', $edit['icon_style']);
  }
}

/**
 * Implements hook_block_view().
 */
function uber_publisher_follow_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'uber-publisher-follow':
      $platforms_values = variable_get('follow_platforms', array());
      $platforms = _uber_publisher_follow_cleanup_platforms($platforms_values);

      if (count($platforms) > 0) {
        $block['subject'] = t('Follow Us');
        $block['content'] = array(
          '#theme' => 'uber_publisher_follow_platforms',
          '#platform_values' => $platforms,
          '#icon_style' => variable_get('uber_publisher_follow_icon_style' , array()),
          '#appearance' => variable_get('uber_publisher_follow_appearance', 'h'),
          '#link_attributes' => array('target' => '_blank'),
          '#attributes' => array(
            'class' => array('uber-publisher-follow', 'platforms'),
          ),
        );

        // Add css to the block.
        $block['content']['#attached']['css'][] = drupal_get_path('module', 'uber_publisher_follow') . '/uber_publisher_follow.css';
      }

      break;
  }

  return $block;
}

/**
 * Get the available platforms.
 *
 * @return array
 *   Returns a list of platforms.
 */
function uber_publisher_follow_platforms() {
  $platforms = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($platforms)) {
    return $platforms;
  }

  include_once 'uber_publisher_follow.platforms.inc';

  $platforms = array();
  $platforms = module_invoke_all('uber_publisher_follow_platform_info');

  drupal_alter('uber_publisher_follow_platform_info', $platforms);

  return $platforms;
}

/**
 * Get all registered icon sets.
 *
 * @return array
 *   Return a list of all registered platforms.
 */
function uber_publisher_follow_iconsets() {
  $sets = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($sets)) {
    return $sets;
  }

  include_once 'uber_publisher_follow.iconsets.inc';

  $sets = array();
  $sets = module_invoke_all('uber_publisher_follow_iconset_info');

  return $sets;
}

/**
 * Get informations about a specific icon set.
 *
 * @param string $iconset
 *   Name of the icon set.
 *
 * @return array
 *   Informations about the icon set.
 */
function uber_publisher_follow_iconset($iconset) {
  $sets = uber_publisher_follow_iconsets();
  return isset($sets[$iconset]) ? $sets[$iconset] : FALSE;
}

/**
 * Returns an array with the possible locations of the installed iconsets.
 *
 * @param string $iconset
 *   Optional: Name of the iconset.
 *
 * @return array
 *   Possible path locations of the iconsets.
 */
function uber_publisher_follow_searchdirs($iconset = '') {
  $searchdirs = array();

  $profile = drupal_get_path('profile', drupal_get_profile());
  $config = conf_path();

  // Similar to 'modules' and 'themes' directories in the root directory,
  // certain distributions may want to place libraries into a 'libraries'
  // directory in Drupal's root directory.
  $searchdirs[] = 'libraries';

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place libraries into a
  // 'libraries' directory. But exclude/ignore the standard drupal profiles.
  if (!in_array($profile, array('minimal', 'standard', 'testing'))) {
    $searchdirs[] = "$profile/libraries";
  }

  // Always search sites/all/libraries.
  $searchdirs[] = 'sites/all/libraries';

  // Also search sites/<domain>/libraries.
  $searchdirs[] = "$config/libraries";

  if (!empty($iconset)) {
    foreach ($searchdirs as $key => $dir) {
      $searchdirs[$key] = $dir . '/' . $iconset;
    }
  }

  return $searchdirs;
}

/**
 * Return an array of library directories.
 *
 * @return array
 *   A list of library directories.
 */
function uber_publisher_follow_libraries() {
  $directories = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($directories)) {
    return $directories;
  }

  $searchdirs = uber_publisher_follow_searchdirs();

  // Add the uber_publisher_follow module directory.
  $searchdirs[] = drupal_get_path('module', 'uber_publisher_follow') . '/libraries';

  $directories = array();
  $nomask = array('CVS');
  foreach ($searchdirs as $dir) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while (FALSE !== ($file = readdir($handle))) {
        if (!in_array($file, $nomask) && $file[0] != '.') {
          if (is_dir("$dir/$file")) {
            $directories[$file] = "$dir/$file";
          }
        }
      }
      closedir($handle);
    }
  }

  return $directories;
}

/**
 * Get the list options for the icon set style select.
 *
 * @return array
 *   Array with the select options.
 */
function uber_publisher_follow_iconsets_options() {
  $iconsets = uber_publisher_follow_iconsets();
  $options = array();

  foreach ($iconsets as $iconset_name => $iconset) {
    foreach ($iconset['styles'] as $sid => $style) {
      $options[$iconset['name']][$iconset_name . ':' . $sid] = $style;
    }
  }

  return $options;
}

/**
 * Helper function to clean up the platforms array from the empty
 * values.
 *
 * @param array $platforms
 *   The array with the platforms.
 *
 * @return array
 *   The cleaned platforms array.
 */
function _uber_publisher_follow_cleanup_platforms($platforms) {
  foreach ((array) $platforms as $key => $platform) {
    if (empty($platform['platform_value'])) {
      unset($platforms[$key]);
    }
  }

  return $platforms;
}
