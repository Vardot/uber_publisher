<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 * @see system_install().
 */
function uber_publisher_install() {
  //themes to enable and disable
  theme_enable(array('uber_starter'));
  theme_disable(array('bartik', 'vartheme_admin', 'vartheme'));
  variable_set('admin_theme', 'uber_admin');
}

/**
 * Implements hook_install_tasks().
 */
function uber_publisher_install_tasks() {
  // Remove any status messages that might have been set. They are unneeded.
  drupal_get_messages('status', TRUE);

  // Set the installation theme.
  // @todo the theme does not inharite the base corectly.
  if ($GLOBALS['theme'] != 'uber_admin') {
    unset($GLOBALS['theme']);
    drupal_static_reset();
    $GLOBALS['conf']['maintenance_theme'] = 'uber_admin';
    _drupal_maintenance_theme();
  }
}

/**
 * Implements hook_install_tasks_alter().
 */
function uber_publisher_install_tasks_alter(&$tasks, $install_state) {
  // Add Extra dependency and options
  if ($install_state['parameters']['profile'] == 'uber_publisher') {
    $uber_publisher_install_load_profile_extra = array(
      'uber_publisher_install_load_profile_extra' => array(
        'run' => INSTALL_TASK_RUN_IF_REACHED,
      ),
    );
    _array_splice_assoc($tasks, 3, 0, $uber_publisher_install_load_profile_extra);
  }

  // Remove steps from being displayed in installation menu because we usually skip them.
  $tasks['install_select_profile']['display'] = FALSE;
  $tasks['install_select_locale']['display'] = FALSE;
  $tasks['install_verify_requirements']['display'] = FALSE;
  $tasks['install_settings_form']['display'] = FALSE;

  // Default install language is english there is no choice.
  $tasks['install_select_locale']['function'] = 'uber_publisher_install_locale_selection';

  // If there is a ready database we use it for quick installation.
  $tasks['install_profile_modules']['function'] = 'uber_publisher_install_profile_modules';

  // Add our extra installation step to revert, rebuild everything.
  $tasks['install_finished']['function'] = 'uber_publisher_install_finished';

  // Pick the Bundle that the site admin intend to use.
  $task_config_bundle['uber_publisher_install_config_bundle_form'] = array(
    'display' => TRUE,
    'display_name' => st('Site bundle'),
    'type' => 'form',
    'function' => 'uber_publisher_install_config_bundle_form',
  );

  // This step is after install_configure_form step.
  $task_config_bundle_after = array_search('install_configure_form', array_keys($tasks)) + 2;
  _array_splice_assoc($tasks, $task_config_bundle_after, 0, $task_config_bundle);

  // Pick the apps that the site admin intend to use.
  require_once(drupal_get_path('module', 'apps') . '/apps.profile.inc');
  $server = array(
    'machine name' => 'uber_publisher',
    'default apps' => array(
      // built-in apps
      'uber_publisher_author_profile',
    ),
  );
  $app_tasks = apps_profile_install_tasks($install_state, $server);

  // We dont check if apps can install this should be already asumed as yes.
  unset($app_tasks['apps_install_verify']);
  $app_tasks['apps_profile_install_app_modules_uber_publisher']['display'] = TRUE;
  $app_tasks['apps_profile_apps_select_form_uber_publisher']['display_name'] = 'Select apps';
  $app_tasks['apps_profile_install_app_modules_uber_publisher']['display_name'] = 'Install apps';
  $app_tasks_after = array_search('uber_publisher_install_config_bundle_form', array_keys($tasks)) + 1;
  _array_splice_assoc($tasks, $app_tasks_after, 0, $app_tasks);

  // Pick the site appearance settings that the site admin intend to use.
  $task_config_appearance['uber_publisher_install_config_appearance'] = array(
    'display' => TRUE,
    'display_name' => st('Site appearance'),
    'type' => 'form',
    'function' => 'uber_publisher_install_config_appearance',
  );

  // This step is after uber_publisher_install_config_bundle step.
  $task_config_appearance_after = array_search('apps_profile_enable_app_modules_uber_publisher', array_keys($tasks)) + 1;
  _array_splice_assoc($tasks, $task_config_appearance_after, 0, $task_config_appearance);
}

/**
 * Installation step callback.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 */
function uber_publisher_install_load_profile_extra(&$install_state) {
  // Add extra feature as a dependancey only if the installation profile is
  // uber_publisher.
  $install_state['profile_info']['dependencies'][] = 'uber_publisher_taxonomy';
  $install_state['profile_info']['dependencies'][] = 'uber_publisher_article';
}

/**
 * Set default language.
 * @see install_select_locale().
 */
function uber_publisher_install_locale_selection(&$install_state){
  $install_state['parameters']['locale'] = 'en';
}

/**
 * Use quick install mode if possible, fallback to default if not.
 * @see install_profile_modules().
 */
function uber_publisher_install_profile_modules(&$install_state) {
  // Get the current version of the profile.
  $profile_version = $install_state['profile_info']['version'];

  // Check if we have a ready database for this version of the profile.
  $db_path = DRUPAL_ROOT . '/' . drupal_get_path('profile', 'uber_publisher') . "/databases/uber_publisher-{$profile_version}.mysql";
  if (file_exists($db_path) && is_readable($db_path)) {
    $sql = file_get_contents($db_path);
    $connection = Database::getConnection('default');
    $connection->exec('SET UNIQUE_CHECKS=0; set foreign_key_checks=0; set sql_log_bin=0; set unique_checks=0;');
    $status = $connection->exec($sql);
    return array(
      'operations' => array(),
      'title' => 'Installing Drupal',
      'error_message' => 'The installation has encountered an error.',
      'finished' => '_install_profile_modules_finished'
    );
  }

  // Fallback to default installation if quick install faild
  $batch = install_profile_modules($install_state);
  return $batch;
}

function uber_publisher_install_config_bundle_form($form, &$form_state, &$install_state) {
  include_once drupal_get_path('module', 'uber_publisher_admin') . '/includes/uber_publisher_bundle.inc';
  $form = uber_publisher_bundle_form($form, $form_state);
  unset($form['#submit']);
  return $form;
}

function uber_publisher_install_config_bundle_form_validate($form, $form_state) {
  include_once drupal_get_path('module', 'uber_publisher_admin') . '/includes/uber_publisher_bundle.inc';
  // @todo needs validation.
  uber_publisher_bundle_form_validate($form, $form_state);
}

function uber_publisher_install_config_bundle_form_submit($form, $form_state) {
  if (!empty($form_state['values']['uber_publisher_bundle'])) {
    $_SESSION['bundle'] = $form_state['values']['uber_publisher_bundle'];
  }
}

function uber_publisher_install_config_appearance($form, &$form_state, &$install_state) {
  // Remove any messages set by enabled modules.
  // @todo check if there is no errors (really).
  drupal_get_messages(NULL, TRUE);

  include_once drupal_get_path('module', 'uber_publisher_admin') . '/includes/uber_publisher_admin.page.inc';
  $form = uber_publisher_appearance($form, $form_state);

  return $form;
}

function uber_publisher_install_config_appearance_validate($form, &$form_state) {
  include_once drupal_get_path('module', 'uber_publisher_admin') . '/includes/uber_publisher_admin.page.inc';
  uber_publisher_appearance_validate($form, $form_state);
}

function uber_publisher_install_config_appearance_submit($form, &$form_state) {
  include_once drupal_get_path('module', 'uber_publisher_admin') . '/includes/uber_publisher_admin.page.inc';
  uber_publisher_appearance_submit($form, $form_state);
}

function uber_publisher_install_finished(&$install_state) {
  drupal_static_reset();
  drupal_get_schema(NULL, TRUE);
  drupal_flush_all_caches();

  $batch = _varbase_install_batch_finished();
  variable_set('install_profile', drupal_get_profile());
  db_update('system')->fields(array('weight' => 1000))->condition('type', 'module')->condition('name', drupal_get_profile())->execute();

  if (isset($_SESSION['bundle'])) {
    array_unshift($batch['operations'], array('_varbase_installer_install', array($_SESSION['bundle'], 'Bundle')));
  }
  else {
    array_unshift($batch['operations'], array('_varbase_installer_install', array('bundle_starter', 'Bundle')));
  }

  return $batch;
}
